import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { toast } from '@/hooks/use-toast';
import { Profile } from '@/types/dating';

interface Gift {
  id: string;
  name: string;
  icon: string;
  price: number;
  emoji: string;
}

interface GiftModalProps {
  isOpen: boolean;
  onClose: () => void;
  profile: Profile | null;
  userBalance: number;
  onGiftSent: (giftId: string, cost: number) => void;
}

const gifts: Gift[] = [
  { id: '1', name: '–†–æ–∑–∞', icon: 'Heart', price: 0, emoji: 'üåπ' },
  { id: '2', name: '–ü–æ—Ü–µ–ª—É–π', icon: 'Heart', price: 5, emoji: 'üíã' },
  { id: '3', name: '–ö–æ–Ω—Ñ–µ—Ç–∞', icon: 'Gift', price: 5, emoji: 'üç¨' },
  { id: '4', name: '–¶–≤–µ—Ç—ã', icon: 'Flower', price: 5, emoji: 'üíê' },
  { id: '5', name: '–¢–æ—Ä—Ç', icon: 'Cake', price: 5, emoji: 'üéÇ' },
  { id: '6', name: '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ', icon: 'Wine', price: 5, emoji: 'üçæ' },
  { id: '7', name: '–ú–∏—à–∫–∞', icon: 'Heart', price: 5, emoji: 'üß∏' },
  { id: '8', name: '–°–µ—Ä–¥—Ü–µ', icon: 'Heart', price: 5, emoji: 'üíñ' },
];

const GiftModal: React.FC<GiftModalProps> = ({
  isOpen,
  onClose,
  profile,
  userBalance,
  onGiftSent
}) => {
  const [selectedGift, setSelectedGift] = useState<Gift | null>(null);

  const handleGiftSend = (gift: Gift) => {
    if (gift.price > userBalance) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
        description: `–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ "${gift.name}" –Ω—É–∂–Ω–æ ${gift.price} –º–æ–Ω–µ—Ç`,
        variant: "destructive",
      });
      return;
    }

    onGiftSent(gift.id, gift.price);
    
    toast({
      title: "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéÅ",
      description: `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ "${gift.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${profile?.name}`,
    });
    
    onClose();
  };

  if (!profile) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="text-center">
            –ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è {profile.name}
          </DialogTitle>
        </DialogHeader>
        
        <div className="text-center mb-4">
          <div className="flex items-center justify-center gap-2 text-sm text-gray-600">
            <Icon name="Coins" size={16} />
            <span>–í–∞—à –±–∞–ª–∞–Ω—Å: {userBalance} –º–æ–Ω–µ—Ç</span>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-3">
          {gifts.map((gift) => (
            <div
              key={gift.id}
              className={`relative p-3 rounded-lg border-2 cursor-pointer transition-all ${
                selectedGift?.id === gift.id
                  ? 'border-red-500 bg-red-50'
                  : 'border-gray-200 hover:border-red-300 hover:bg-red-50'
              }`}
              onClick={() => setSelectedGift(gift)}
            >
              <div className="text-center">
                <div className="text-2xl mb-1">{gift.emoji}</div>
                <div className="text-xs font-medium text-gray-700 mb-1">
                  {gift.name}
                </div>
                <div className="text-xs text-gray-500">
                  {gift.price === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${gift.price} –º–æ–Ω–µ—Ç`}
                </div>
              </div>
              
              {gift.price > userBalance && (
                <div className="absolute inset-0 bg-gray-500/20 rounded-lg flex items-center justify-center">
                  <Icon name="Lock" size={20} className="text-gray-500" />
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="flex gap-2 mt-6">
          <Button
            variant="outline"
            onClick={onClose}
            className="flex-1"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={() => selectedGift && handleGiftSend(selectedGift)}
            disabled={!selectedGift || (selectedGift.price > userBalance)}
            className="flex-1 bg-red-500 hover:bg-red-600"
          >
            <Icon name="Gift" size={16} className="mr-2" />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default GiftModal;