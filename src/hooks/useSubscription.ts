import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import {
  SUBSCRIPTION_PLANS,
  type SellerSubscription,
  type SubscriptionStatus,
} from "@/types/subscription";
import { toast } from "@/hooks/use-toast";

export const useSubscription = () => {
  const { user } = useAuth();
  const [subscription, setSubscription] = useState<SellerSubscription | null>(
    null,
  );
  const [subscriptionStatus, setSubscriptionStatus] =
    useState<SubscriptionStatus | null>(null);
  const [loading, setLoading] = useState(true);

  // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
  const getStorageKey = () => `seller-subscription-${user?.id || "guest"}`;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
  useEffect(() => {
    if (user?.userType === "seller") {
      loadSubscription();
    }
  }, [user]);

  const loadSubscription = () => {
    try {
      const savedSubscription = localStorage.getItem(getStorageKey());
      if (savedSubscription) {
        const parsed: SellerSubscription = JSON.parse(savedSubscription);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        parsed.startDate = new Date(parsed.startDate);
        parsed.endDate = new Date(parsed.endDate);

        setSubscription(parsed);
        updateSubscriptionStatus(parsed);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    }
    setLoading(false);
  };

  const updateSubscriptionStatus = (sub: SellerSubscription) => {
    const now = new Date();
    const plan = SUBSCRIPTION_PLANS.find((p) => p.id === sub.planId);

    if (!plan) {
      setSubscriptionStatus(null);
      return;
    }

    const isActive = sub.isActive && sub.endDate > now;
    const daysRemaining = Math.max(
      0,
      Math.ceil(
        (sub.endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24),
      ),
    );

    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
    if (sub.endDate <= now && sub.isActive) {
      const updatedSubscription = {
        ...sub,
        isActive: false,
      };
      localStorage.setItem(getStorageKey(), JSON.stringify(updatedSubscription));
      setSubscription(updatedSubscription);
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const productsUsed = getProductsCount();
    const canAddProducts =
      isActive && (plan.maxProducts === -1 || productsUsed < plan.maxProducts);

    setSubscriptionStatus({
      isActive,
      planName: plan.name,
      daysRemaining,
      productsUsed,
      maxProducts: plan.maxProducts,
      canAddProducts,
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
  const getProductsCount = (): number => {
    try {
      const products = JSON.parse(localStorage.getItem("products") || "[]");
      return products.filter((product: any) => product.sellerId === user?.id)
        .length;
    } catch {
      return 0;
    }
  };

  // –û—Ç–º–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const markSubscriptionModalShown = () => {
    const modalShownKey = `subscription-modal-shown-${user?.id || "guest"}`;
    sessionStorage.setItem(modalShownKey, "true");
  };

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  const activateSubscription = (planId: string) => {
    const plan = SUBSCRIPTION_PLANS.find((p) => p.id === planId);
    if (!plan || !user) {
      throw new Error("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    }

    const startDate = new Date();
    const endDate = new Date();

    if (plan.duration === "month") {
      endDate.setMonth(endDate.getMonth() + 1);
    } else {
      endDate.setFullYear(endDate.getFullYear() + 1);
    }

    const newSubscription: SellerSubscription = {
      sellerId: user.id,
      planId: plan.id,
      startDate,
      endDate,
      isActive: true,
      remainingProducts: plan.maxProducts === -1 ? -1 : plan.maxProducts,
      autoRenew: true,
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    localStorage.setItem(getStorageKey(), JSON.stringify(newSubscription));
    setSubscription(newSubscription);
    updateSubscriptionStatus(newSubscription);

    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –∏ –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω
    markSubscriptionModalShown();

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    const transaction = {
      id: Date.now().toString(),
      sellerId: user.id,
      type: "subscription",
      amount: plan.price,
      description: `–ü–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" –Ω–∞ ${plan.duration === "month" ? "–º–µ—Å—è—Ü" : "–≥–æ–¥"}`,
      createdAt: new Date().toISOString(),
      status: "completed",
      planId: plan.id,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transactions = JSON.parse(
      localStorage.getItem("seller-wallet-transactions") || "[]",
    );
    transactions.push(transaction);
    localStorage.setItem(
      "seller-wallet-transactions",
      JSON.stringify(transactions),
    );

    toast({
      title: "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üéâ",
      description: `–¢–∞—Ä–∏—Ñ "${plan.name}" —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã!`,
    });

    return newSubscription;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const canAddProduct = (): { allowed: boolean; reason?: string } => {
    if (!subscription || !subscriptionStatus) {
      return { allowed: false, reason: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏" };
    }

    if (!subscriptionStatus.isActive) {
      return { allowed: false, reason: "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞" };
    }

    if (
      subscriptionStatus.maxProducts !== -1 &&
      subscriptionStatus.productsUsed >= subscriptionStatus.maxProducts
    ) {
      return {
        allowed: false,
        reason: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ (${subscriptionStatus.maxProducts})`,
      };
    }

    return { allowed: true };
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ
  const getCurrentPlan = () => {
    if (!subscription) return null;
    return SUBSCRIPTION_PLANS.find((p) => p.id === subscription.planId) || null;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
  const shouldShowSubscriptionModal = (): boolean => {
    if (!subscription || !subscriptionStatus) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      const modalShownKey = `subscription-modal-shown-${user?.id || "guest"}`;
      const modalShown = sessionStorage.getItem(modalShownKey);
      if (modalShown) {
        return false;
      }
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const endDate = subscription.endDate;
    const isExpired = now > endDate;
    
    return !subscriptionStatus.isActive || isExpired;
  };

  // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const cancelSubscription = () => {
    if (subscription) {
      const updatedSubscription = {
        ...subscription,
        autoRenew: false,
      };
      localStorage.setItem(
        getStorageKey(),
        JSON.stringify(updatedSubscription),
      );
      setSubscription(updatedSubscription);

      toast({
        title: "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
        description: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
      });
    }
  };

  // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  const resumeSubscription = () => {
    if (subscription) {
      const updatedSubscription = {
        ...subscription,
        autoRenew: true,
      };
      localStorage.setItem(
        getStorageKey(),
        JSON.stringify(updatedSubscription),
      );
      setSubscription(updatedSubscription);

      toast({
        title: "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ",
        description: "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
      });
    }
  };

  return {
    subscription,
    subscriptionStatus,
    loading,
    activateSubscription,
    canAddProduct,
    getCurrentPlan,
    shouldShowSubscriptionModal,
    markSubscriptionModalShown,
    cancelSubscription,
    resumeSubscription,
    refreshSubscription: loadSubscription,
  };
};