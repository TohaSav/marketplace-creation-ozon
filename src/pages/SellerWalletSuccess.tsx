import { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "@/hooks/use-toast";
import Icon from "@/components/ui/icon";
import { useAuth } from "@/context/AuthContext";

interface SellerWalletTransaction {
  id: string;
  sellerId: string;
  type:
    | "deposit"
    | "withdrawal"
    | "tariff"
    | "advertising"
    | "commission"
    | "game_prize";
  amount: number;
  description: string;
  createdAt: string;
  status: "pending" | "completed" | "failed";
}

export default function SellerWalletSuccess() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [transaction, setTransaction] =
    useState<SellerWalletTransaction | null>(null);

  useEffect(() => {
    if (!user || user.userType !== "seller") {
      navigate("/seller");
      return;
    }

    const transactionId = searchParams.get("transaction");
    if (transactionId) {
      processSuccessfulPayment(transactionId);
    } else {
      setLoading(false);
    }
  }, [user, searchParams, navigate]);

  const processSuccessfulPayment = (transactionId: string) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const allTransactions = JSON.parse(
        localStorage.getItem("seller-wallet-transactions") || "[]",
      );
      const transactionIndex = allTransactions.findIndex(
        (t: SellerWalletTransaction) => t.id === transactionId,
      );

      if (transactionIndex === -1) {
        throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }

      const foundTransaction = allTransactions[transactionIndex];

      if (foundTransaction.status === "completed") {
        setTransaction(foundTransaction);
        setLoading(false);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      foundTransaction.status = "completed";
      allTransactions[transactionIndex] = foundTransaction;
      localStorage.setItem(
        "seller-wallet-transactions",
        JSON.stringify(allTransactions),
      );

      // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
      if (user && foundTransaction.type === "deposit") {
        const sellerData = JSON.parse(
          localStorage.getItem("seller-token") || "{}",
        );
        const currentBalance = parseFloat(sellerData.balance || "0");
        const newBalance = currentBalance + foundTransaction.amount;

        sellerData.balance = newBalance.toString();
        localStorage.setItem("seller-token", JSON.stringify(sellerData));

        toast({
          title: "–ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω! üí∞",
          description: `–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ ${foundTransaction.amount} ‚ÇΩ`,
        });
      }

      setTransaction(foundTransaction);
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <Card className="text-center">
        <CardHeader>
          <div className="flex justify-center mb-4">
            <Icon name="CheckCircle" size={64} className="text-green-500" />
          </div>
          <CardTitle className="text-2xl text-green-600">
            –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!
          </CardTitle>
        </CardHeader>
        <CardContent>
          {transaction && (
            <div className="space-y-4">
              <div className="bg-green-50 p-6 rounded-lg">
                <h3 className="font-semibold text-green-900 mb-2">
                  –î–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
                </h3>
                <div className="text-sm text-green-800 space-y-1">
                  <p>
                    <strong>–°—É–º–º–∞:</strong> {transaction.amount} ‚ÇΩ
                  </p>
                  <p>
                    <strong>–î–∞—Ç–∞:</strong>{" "}
                    {new Date(transaction.createdAt).toLocaleString()}
                  </p>
                  <p>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong> –£—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ
                  </p>
                  <p>
                    <strong>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</strong> {transaction.id}
                  </p>
                </div>
              </div>

              <div className="bg-purple-50 p-4 rounded-lg">
                <h4 className="font-semibold text-purple-900 mb-2">
                  –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–µ–ø–µ—Ä—å:
                </h4>
                <ul className="text-sm text-purple-800 space-y-1">
                  <li>üëë –ü–æ–∫—É–ø–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞</li>
                  <li>üì¢ –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É —Ç–æ–≤–∞—Ä–æ–≤</li>
                  <li>üéØ –ë—ã—Å—Ç—Ä–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —É—Å–ª—É–≥–∏</li>
                  <li>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏</li>
                </ul>
              </div>

              <div className="space-y-3">
                <Button
                  onClick={() => navigate("/seller/wallet")}
                  className="w-full bg-green-600 hover:bg-green-700"
                >
                  <Icon name="Wallet" size={16} className="mr-2" />
                  –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—à–µ–ª–µ–∫
                </Button>
                <Button
                  onClick={() => navigate("/seller/tariffs")}
                  variant="outline"
                  className="w-full"
                >
                  <Icon name="Crown" size={16} className="mr-2" />
                  –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ
                </Button>
                <Button
                  onClick={() => navigate("/seller/advertising")}
                  variant="outline"
                  className="w-full"
                >
                  <Icon name="Megaphone" size={16} className="mr-2" />
                  –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
                </Button>
                <Button
                  onClick={() => navigate("/seller/dashboard")}
                  variant="outline"
                  className="w-full"
                >
                  <Icon name="Home" size={16} className="mr-2" />–í –∫–∞–±–∏–Ω–µ—Ç
                  –ø—Ä–æ–¥–∞–≤—Ü–∞
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
