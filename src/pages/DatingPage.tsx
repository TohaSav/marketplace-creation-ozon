import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { useAuth } from '@/context/AuthContext';
import { toast } from '@/hooks/use-toast';
import { FormData, Profile } from '@/types/dating';
import { useDatingProfiles } from '@/hooks/useDatingProfiles';
import DatingForm from '@/components/dating/DatingForm';
import ProfileCard from '@/components/dating/ProfileCard';
import ProfileModal from '@/components/dating/ProfileModal';
import ProfileStatus from '@/components/dating/ProfileStatus';
import BalanceIndicator from '@/components/dating/BalanceIndicator';
import AuthPrompt from '@/components/dating/AuthPrompt';
import GiftModal from '@/components/dating/GiftModal';

const DatingPage: React.FC = () => {
  const [showForm, setShowForm] = useState(false);
  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [showGiftModal, setShowGiftModal] = useState(false);
  const [giftRecipient, setGiftRecipient] = useState<Profile | null>(null);
  const [walletBalance, setWalletBalance] = useState(0); // –ë–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ 0)
  const [datingBalance, setDatingBalance] = useState(0); // –ë–∞–ª–∞–Ω—Å –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ 0)
  const [formData, setFormData] = useState<FormData>({
    name: '',
    city: '',
    birthDate: '',
    gender: '',
    lookingFor: '',
    about: '',
    photo: null
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { user } = useAuth();
  const isLoggedIn = !!user;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
  const { profiles, isSubmitting, userProfile, submitProfile, loadMoreProfiles, isLoading, hasMore } = useDatingProfiles(user?.id);

  const openProfile = (profile: Profile) => {
    setSelectedProfile(profile);
    setShowProfileModal(true);
  };

  const closeProfile = () => {
    setSelectedProfile(null);
    setShowProfileModal(false);
  };

  const handleLike = (profile: Profile) => {
    toast({
      title: "–ù—Ä–∞–≤–∏—Ç—Å—è! ‚ù§Ô∏è",
      description: `–í—ã –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ ${profile.name}`,
    });
  };

  const handleDislike = (profile: Profile) => {
    toast({
      title: "–ü—Ä–æ–ø—É—Å–∫",
      description: `–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ${profile.name}`,
      variant: "destructive",
    });
  };

  const handleSuperLike = (profile: Profile) => {
    if (datingBalance < 10) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
        description: "–î–ª—è —Å—É–ø–µ—Ä-–ª–∞–π–∫–∞ –Ω—É–∂–Ω–æ 10 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        variant: "destructive",
      });
      return;
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    setDatingBalance(prev => prev - 10);
    toast({
      title: "–°—É–ø–µ—Ä-–ª–∞–π–∫! üî•",
      description: `–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—É–ø–µ—Ä-–ª–∞–π–∫ ${profile.name} –∑–∞ 10 —Ä—É–±–ª–µ–π`,
    });
  };

  const handleTopUp = (amount: number) => {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–∞–ª–∞–Ω—Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    setWalletBalance(prev => prev - amount);
    setDatingBalance(prev => prev + amount);
  };

  const handleGift = (profile: Profile) => {
    setGiftRecipient(profile);
    setShowGiftModal(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–∏
  const handleScroll = useCallback(() => {
    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isLoading) {
      return;
    }
    
    if (hasMore) {
      loadMoreProfiles();
    }
  }, [isLoading, hasMore, loadMoreProfiles]);

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isLoggedIn) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã",
        variant: "destructive",
      });
      return;
    }

    const success = await submitProfile(formData);
    if (success) {
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData({
        name: '',
        city: '',
        birthDate: '',
        gender: '',
        lookingFor: '',
        about: '',
        photo: null
      });
      setShowForm(false);
    }
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 to-red-50 py-8">
        <div className="container mx-auto px-4">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 flex items-center justify-center gap-2">
              <Icon name="Heart" size={32} className="text-red-500" />
              –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞
            </h1>
            <p className="text-gray-600 mt-2">
              –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É
            </p>
          </div>
          <AuthPrompt />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-red-50 py-8">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 flex items-center justify-center gap-2">
            <Icon name="Heart" size={32} className="text-red-500" />
            –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞
          </h1>
          <p className="text-gray-600 mt-2">
            –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É
          </p>
        </div>

        <div className="max-w-6xl mx-auto">
          <div className="flex justify-center mb-6">
            <BalanceIndicator 
              balance={datingBalance} 
              walletBalance={walletBalance}
              onTopUp={handleTopUp}
            />
          </div>

          {!userProfile && (
            <div className="flex justify-center mb-8">
              <Button 
                onClick={() => setShowForm(!showForm)}
                className="bg-red-500 hover:bg-red-600"
              >
                <Icon name="Plus" size={20} className="mr-2" />
                {showForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'}
              </Button>
            </div>
          )}

          {userProfile && (
            <ProfileStatus userProfile={userProfile} />
          )}

          {showForm && (
            <DatingForm
              formData={formData}
              setFormData={setFormData}
              onSubmit={handleSubmit}
              isSubmitting={isSubmitting}
              onCancel={() => setShowForm(false)}
            />
          )}

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {profiles.map((profile) => (
              <ProfileCard
                key={profile.id}
                profile={profile}
                onClick={openProfile}
                onLike={handleLike}
                onSuperLike={handleSuperLike}
                onDislike={handleDislike}
                currentUserId={user?.id}
                onGift={handleGift}
              />
            ))}
          </div>

          {profiles.length === 0 && !isLoading && (
            <div className="text-center py-12">
              <Icon name="Heart" size={64} className="mx-auto text-gray-300 mb-4" />
              <p className="text-gray-500">
                –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!
              </p>
            </div>
          )}

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {isLoading && (
            <div className="text-center py-8">
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500 mr-3"></div>
                <span className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...</span>
              </div>
            </div>
          )}

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç */}
          {!hasMore && profiles.length > 0 && (
            <div className="text-center py-8">
              <p className="text-gray-500">
                –í—Å–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º–∏ ‚ù§Ô∏è
              </p>
            </div>
          )}
        </div>

        <ProfileModal
          profile={selectedProfile}
          isOpen={showProfileModal}
          onClose={closeProfile}
          userBalance={datingBalance}
          onBalanceChange={(amount) => setDatingBalance(prev => prev + amount)}
        />

        <GiftModal
          isOpen={showGiftModal}
          onClose={() => setShowGiftModal(false)}
          recipientName={giftRecipient?.name || ''}
          recipientId={giftRecipient?.id || ''}
          userBalance={datingBalance}
          onSendGift={handleSendGift}
        />
        
        <GiftModal
          isOpen={showGiftModal}
          onClose={() => {
            setShowGiftModal(false);
            setGiftRecipient(null);
          }}
          profile={giftRecipient}
          userBalance={datingBalance}
          onGiftSent={(giftId, cost) => {
            setDatingBalance(prev => prev - cost);
            setShowGiftModal(false);
            setGiftRecipient(null);
          }}
        />
      </div>
    </div>
  );
};

export default DatingPage;