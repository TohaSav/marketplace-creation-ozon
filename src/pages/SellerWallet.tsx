import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/hooks/use-toast";
import Icon from "@/components/ui/icon";
import { useAuth } from "@/context/AuthContext";

interface SellerWalletTransaction {
  id: string;
  sellerId: string;
  type:
    | "deposit"
    | "withdrawal"
    | "tariff"
    | "advertising"
    | "commission"
    | "game_prize";
  amount: number;
  description: string;
  createdAt: string;
  status: "pending" | "completed" | "failed";
}

export default function SellerWallet() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [balance, setBalance] = useState(0);
  const [transactions, setTransactions] = useState<SellerWalletTransaction[]>(
    [],
  );
  const [depositAmount, setDepositAmount] = useState("");
  const [loading, setLoading] = useState(false);
  const [showDepositForm, setShowDepositForm] = useState(false);

  useEffect(() => {
    if (!user || user.userType !== "seller") {
      navigate("/seller");
      return;
    }
    loadWalletData();
  }, [user, navigate]);

  const loadWalletData = () => {
    if (!user) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ localStorage (–∏—Å–ø–æ–ª—å–∑—É–µ–º seller-token –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const sellerData = JSON.parse(localStorage.getItem("seller-token") || "{}");
    setBalance(parseFloat(sellerData.balance || "0"));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const allTransactions = JSON.parse(
      localStorage.getItem("seller-wallet-transactions") || "[]",
    );
    const sellerTransactions = allTransactions.filter(
      (t: SellerWalletTransaction) => t.sellerId === user.id,
    );
    setTransactions(
      sellerTransactions.sort(
        (a: SellerWalletTransaction, b: SellerWalletTransaction) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
      ),
    );
  };

  const handleDeposit = async () => {
    if (!user) return;

    const amount = parseFloat(depositAmount);
    if (isNaN(amount) || amount <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    if (amount < 10) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 —Ä—É–±–ª–µ–π",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      const transaction: SellerWalletTransaction = {
        id: Date.now().toString(),
        sellerId: user.id,
        type: "deposit",
        amount: amount,
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ ${amount} ‚ÇΩ`,
        createdAt: new Date().toISOString(),
        status: "pending",
      };

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
      const paymentData = {
        amount: {
          value: amount.toString(),
          currency: "RUB",
        },
        confirmation: {
          type: "redirect",
          return_url: `${window.location.origin}/seller/wallet-success?transaction=${transaction.id}`,
        },
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ ${amount} ‚ÇΩ`,
        metadata: {
          type: "seller_wallet_deposit",
          sellerId: user.id,
          transactionId: transaction.id,
        },
      };

      const response = await fetch("/api/create-payment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(paymentData),
      });

      const payment = await response.json();

      if (payment.confirmation && payment.confirmation.confirmation_url) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const allTransactions = JSON.parse(
          localStorage.getItem("seller-wallet-transactions") || "[]",
        );
        allTransactions.push(transaction);
        localStorage.setItem(
          "seller-wallet-transactions",
          JSON.stringify(allTransactions),
        );

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
        window.location.href = payment.confirmation.confirmation_url;
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂");
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const getTransactionIcon = (type: string) => {
    switch (type) {
      case "deposit":
        return <Icon name="Plus" size={16} className="text-green-600" />;
      case "withdrawal":
        return <Icon name="Minus" size={16} className="text-red-600" />;
      case "tariff":
        return <Icon name="Crown" size={16} className="text-purple-600" />;
      case "advertising":
        return <Icon name="Megaphone" size={16} className="text-blue-600" />;
      case "commission":
        return <Icon name="Percent" size={16} className="text-orange-600" />;
      case "game_prize":
        return <Icon name="Gift" size={16} className="text-yellow-600" />;
      default:
        return <Icon name="CreditCard" size={16} className="text-gray-600" />;
    }
  };

  const getTransactionColor = (type: string) => {
    switch (type) {
      case "deposit":
      case "game_prize":
        return "text-green-600";
      case "withdrawal":
      case "tariff":
      case "advertising":
      case "commission":
        return "text-red-600";
      default:
        return "text-gray-600";
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "completed":
        return <Badge className="bg-green-100 text-green-800">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</Badge>;
      case "pending":
        return (
          <Badge className="bg-yellow-100 text-yellow-800">–û–±—Ä–∞–±–æ—Ç–∫–∞</Badge>
        );
      case "failed":
        return <Badge className="bg-red-100 text-red-800">–û—à–∏–±–∫–∞</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
  if (user?.userType === "seller" && user?.status !== "active") {
    return (
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <Card className="text-center">
          <CardHeader>
            <div className="flex justify-center mb-4">
              <Icon name="Lock" size={64} className="text-red-500" />
            </div>
            <CardTitle className="text-2xl text-red-600">
              –ö–æ—à–µ–ª–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 text-lg mb-6">
              –õ–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
            </p>
            <Button
              onClick={() => navigate("/seller/dashboard")}
              variant="outline"
            >
              <Icon name="ArrowLeft" size={16} className="mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–±–∏–Ω–µ—Ç—É
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          variant="ghost"
          onClick={() => navigate("/seller/dashboard")}
          className="mb-4"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç—É
        </Button>
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          –õ–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ üí∞
        </h1>
        <p className="text-gray-600">
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icon name="Wallet" size={20} />
                –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="text-center">
                <div className="text-4xl font-bold text-green-600 mb-2">
                  {balance.toFixed(2)} ‚ÇΩ
                </div>
                <p className="text-sm text-gray-600">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç</p>
              </div>

              <div className="space-y-4">
                <Button
                  onClick={() => setShowDepositForm(!showDepositForm)}
                  className="w-full bg-green-600 hover:bg-green-700"
                >
                  <Icon name="Plus" size={16} className="mr-2" />
                  –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
                </Button>

                {showDepositForm && (
                  <div className="space-y-4 p-4 border rounded-lg bg-gray-50">
                    <div className="space-y-2">
                      <Label htmlFor="depositAmount">–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</Label>
                      <Input
                        id="depositAmount"
                        type="number"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                        value={depositAmount}
                        onChange={(e) => setDepositAmount(e.target.value)}
                        min="10"
                        step="1"
                      />
                      <p className="text-xs text-gray-500">
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 —Ä—É–±–ª–µ–π
                      </p>
                    </div>

                    <div className="flex gap-2">
                      <Button
                        onClick={handleDeposit}
                        disabled={loading}
                        className="flex-1"
                      >
                        {loading ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                            –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...
                          </>
                        ) : (
                          <>
                            <Icon
                              name="CreditCard"
                              size={16}
                              className="mr-2"
                            />
                            –û–ø–ª–∞—Ç–∏—Ç—å
                          </>
                        )}
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => setShowDepositForm(false)}
                      >
                        –û—Ç–º–µ–Ω–∞
                      </Button>
                    </div>
                  </div>
                )}

                <div className="grid grid-cols-2 gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setDepositAmount("500")}
                  >
                    500 ‚ÇΩ
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setDepositAmount("1000")}
                  >
                    1000 ‚ÇΩ
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setDepositAmount("2000")}
                  >
                    2000 ‚ÇΩ
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setDepositAmount("5000")}
                  >
                    5000 ‚ÇΩ
                  </Button>
                </div>
              </div>

              <div className="bg-purple-50 p-4 rounded-lg">
                <h4 className="font-semibold text-purple-900 mb-2">
                  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞:
                </h4>
                <ul className="text-sm text-purple-800 space-y-1">
                  <li>‚Ä¢ –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞</li>
                  <li>‚Ä¢ –û–ø–ª–∞—Ç–∞ —Ä–µ–∫–ª–∞–º—ã</li>
                  <li>‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –∏–∑ –∏–≥—Ä</li>
                  <li>‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icon name="History" size={20} />
                –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {transactions.length === 0 ? (
                  <div className="text-center py-12">
                    <Icon
                      name="FileText"
                      size={64}
                      className="mx-auto text-gray-400 mb-4"
                    />
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
                    </h3>
                    <p className="text-gray-600">
                      –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    </p>
                  </div>
                ) : (
                  transactions.map((transaction) => (
                    <div
                      key={transaction.id}
                      className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50"
                    >
                      <div className="flex items-center gap-3">
                        {getTransactionIcon(transaction.type)}
                        <div>
                          <p className="font-medium text-gray-900">
                            {transaction.description}
                          </p>
                          <p className="text-sm text-gray-500">
                            {new Date(transaction.createdAt).toLocaleString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="text-right">
                          <p
                            className={`font-semibold ${getTransactionColor(transaction.type)}`}
                          >
                            {transaction.type === "deposit" ||
                            transaction.type === "game_prize"
                              ? "+"
                              : "-"}
                            {transaction.amount.toFixed(2)} ‚ÇΩ
                          </p>
                          {getStatusBadge(transaction.status)}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="mt-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Zap" size={20} />
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center gap-2"
                onClick={() => navigate("/seller/tariffs")}
              >
                <Icon name="Crown" size={24} />
                <span>–ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ</span>
                <span className="text-xs text-gray-500">
                  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
                </span>
              </Button>
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center gap-2"
                onClick={() => navigate("/seller/advertising")}
              >
                <Icon name="Megaphone" size={24} />
                <span>–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É</span>
                <span className="text-xs text-gray-500">
                  –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                </span>
              </Button>
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center gap-2"
                onClick={() => navigate("/seller/luck-game")}
              >
                <Icon name="Ticket" size={24} />
                <span>–ò–≥—Ä—ã –£–¥–∞—á–∞</span>
                <span className="text-xs text-gray-500">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–∑—ã</span>
              </Button>
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center gap-2"
                onClick={() => navigate("/seller/dashboard")}
              >
                <Icon name="BarChart3" size={24} />
                <span>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                <span className="text-xs text-gray-500">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</span>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
