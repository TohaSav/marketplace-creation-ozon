import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import CreateStoryModal from "@/components/CreateStoryModal";
import SellerWallet from "@/components/SellerWallet";
import { useSellerDashboard } from "@/hooks/useSellerDashboard";
import { useAuth } from "@/context/AuthContext";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import Icon from "@/components/ui/icon";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { statusSyncManager } from "@/utils/statusSync";
import SubscriptionModal from "@/components/SubscriptionModal";
import SubscriptionStatusCard from "@/components/SubscriptionStatusCard";
import { useSubscription } from "@/hooks/useSubscription";
import PaymentRequiredModal from "@/components/PaymentRequiredModal";

// Tab Components
import StatsGrid from "@/components/seller-dashboard/StatsGrid";
import ProductsTab from "@/components/seller-dashboard/ProductsTab";
import OrdersTab from "@/components/seller-dashboard/OrdersTab";
import AnalyticsTab from "@/components/seller-dashboard/AnalyticsTab";
import FinancesTab from "@/components/seller-dashboard/FinancesTab";
import StoriesTab from "@/components/seller-dashboard/StoriesTab";
import SettingsTab from "@/components/seller-dashboard/SettingsTab";
import SubscriptionStatus from "@/components/SubscriptionStatus";
import SellerStatusAlert from "@/components/SellerStatusAlert";
import RevisionModal from "@/components/RevisionModal";

export default function SellerDashboard() {
  const { user, updateUser } = useAuth();
  const navigate = useNavigate();
  const [showRevisionModal, setShowRevisionModal] = useState(false);
  const { shouldShowSubscriptionModal, activateSubscription } =
    useSubscription();
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
  useEffect(() => {
    if (user?.userType === "seller" && user?.status === "active") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω
      const approvedData = localStorage.getItem(`seller-approved-${user.id}`);
      if (approvedData) {
        const parsedData = JSON.parse(approvedData);
        if (parsedData.approved) {
          // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è
          localStorage.removeItem(`seller-approved-${user.id}`);
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ —Å —Ñ–ª–∞–≥–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è
          navigate('/seller/pricing', { state: { fromApproval: true } });
          return;
        }
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      if (shouldShowSubscriptionModal()) {
        setShowSubscriptionModal(true);
      }
    }
  }, [user, shouldShowSubscriptionModal, navigate]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  useEffect(() => {
    if (!user?.subscription) return;

    const checkSubscription = () => {
      if (user.subscription && user.subscription.isActive) {
        const now = new Date();
        const endDate = new Date(user.subscription.endDate);
        
        if (endDate <= now) {
          // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const updatedUser = {
            ...user,
            subscription: {
              ...user.subscription,
              isActive: false
            }
          };
          updateUser(updatedUser);
        }
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkSubscription();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    const interval = setInterval(checkSubscription, 60000);

    return () => clearInterval(interval);
  }, [user, updateUser]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
  useEffect(() => {
    const unsubscribe = statusSyncManager.subscribe((event) => {
      if (event.sellerId === user?.id) {
        // –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª–µ–Ω (—Å—Ç–∞—Ç—É—Å blocked —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)
        if (
          event.newStatus === "blocked" &&
          event.moderationComment === "–ü—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        ) {
          localStorage.removeItem("seller-token");
          alert(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
          );
          window.location.href = "/";
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const currentSellerToken = localStorage.getItem("seller-token");
        if (currentSellerToken) {
          try {
            const sellerData = JSON.parse(currentSellerToken);
            const updatedSeller = {
              ...sellerData,
              status: event.newStatus,
              moderationComment: event.moderationComment,
            };
            localStorage.setItem("seller-token", JSON.stringify(updatedSeller));

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            setTimeout(() => {
              window.location.reload();
            }, 500);
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞:", error);
          }
        }
      }
    });

    return unsubscribe;
  }, [user?.id]);

  const {
    stats,
    products,
    orders,
    stories,
    isCreateStoryOpen,
    setIsCreateStoryOpen,
    handleCreateStory,
    handleDeleteStory,
    handleAddProduct,
    handleEditProduct,
    handleDeleteProduct,
    handleProcessOrder,
    handleMessageCustomer,
    handleEditProfile,
  } = useSellerDashboard();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ
  const handleSubscribe = async (planId: string) => {
    try {
      await activateSubscription(planId);
      setShowSubscriptionModal(false);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
      throw error;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
  const hasActiveSubscription = user?.subscription?.isActive === true && 
    user?.subscription?.endDate && 
    new Date(user.subscription.endDate) > new Date();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (user?.userType === "seller" && user?.status !== "active") {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <Card className="text-center">
            <CardHeader>
              <div className="flex justify-center mb-4">
                <Icon name="Clock" size={64} className="text-orange-500" />
              </div>
              <CardTitle className="text-2xl font-bold text-gray-800">
                –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 text-lg mb-6 leading-relaxed">
                –û–∂–∏–¥–∞–π—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏.
              </p>

              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border border-blue-200 mb-6">
                <p className="text-gray-800 font-medium text-lg mb-4">
                  –° –£–≤–∞–∂–µ–Ω–∏–µ–º, Calibr Store
                </p>
                <div className="text-sm text-gray-600 space-y-2">
                  <p>üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</p>
                  <p>‚è±Ô∏è –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤</p>
                  <p>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É</p>
                </div>
              </div>

              {user?.status === "revision" && (
                <div className="bg-red-50 p-4 rounded-lg border border-red-200 mb-6">
                  <p className="text-red-800 font-medium">
                    ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è Calibre Store –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞
                    –¥–æ—Ä–∞–±–æ—Ç–∫—É
                  </p>
                  <div className="mt-3 p-3 bg-white rounded border border-red-200">
                    <p className="text-red-700 font-medium text-sm mb-2">
                      –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:
                    </p>
                    <p className="text-red-600 text-sm">
                      {user.revisionComment ||
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}
                    </p>
                  </div>
                  <button
                    onClick={() => setShowRevisionModal(true)}
                    className="mt-3 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm"
                  >
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                  </button>
                </div>
              )}

              {user?.status === "resubmitted" && (
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-6">
                  <p className="text-blue-800 font-medium">
                    üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                  </p>
                  <p className="text-blue-700 text-sm mt-2">
                    –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
                  </p>
                </div>
              )}

              {user?.status === "rejected" && (
                <div className="bg-red-50 p-4 rounded-lg border border-red-200 mb-6">
                  <p className="text-red-800 font-medium">
                    ‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
                  </p>
                  <p className="text-red-700 text-sm mt-2">
                    –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω
                  </p>
                </div>
              )}

              {/* –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
              <div className="border-t pt-6">
                <a
                  href="/notifications"
                  className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Icon name="Bell" size={20} className="mr-2" />
                  –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </a>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ */}
      <PaymentRequiredModal isOpen={!hasActiveSubscription} />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">–ö–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞</h1>
          <p className="text-gray-600 mt-2">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
          </p>
        </div>

        {/* Seller Status Alert */}
        <SellerStatusAlert />

        {/* Stats Cards */}
        <StatsGrid stats={stats} />

        {/* Subscription Status */}
        <div className="mb-8">
          <SubscriptionStatusCard />
        </div>

        {/* Tabs */}
        <Tabs defaultValue="products" className="w-full">
          <TabsList className="grid w-full grid-cols-7">
            <TabsTrigger value="products">–¢–æ–≤–∞—Ä—ã</TabsTrigger>
            <TabsTrigger value="orders">–ó–∞–∫–∞–∑—ã</TabsTrigger>
            <TabsTrigger value="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</TabsTrigger>
            <TabsTrigger value="wallet">–ö–æ—à–µ–ª—ë–∫</TabsTrigger>
            <TabsTrigger value="finances">–§–∏–Ω–∞–Ω—Å—ã</TabsTrigger>
            <TabsTrigger value="stories">Stories</TabsTrigger>
            <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabsTrigger>
          </TabsList>

          <TabsContent value="products" className="mt-6">
            <ProductsTab
              products={products}
              onAddProduct={handleAddProduct}
              onEditProduct={handleEditProduct}
              onDeleteProduct={handleDeleteProduct}
            />
          </TabsContent>

          <TabsContent value="orders" className="mt-6">
            <OrdersTab
              orders={orders}
              onProcessOrder={handleProcessOrder}
              onMessageCustomer={handleMessageCustomer}
            />
          </TabsContent>

          <TabsContent value="analytics" className="mt-6">
            <AnalyticsTab />
          </TabsContent>

          <TabsContent value="wallet" className="mt-6">
            <SellerWallet />
          </TabsContent>

          <TabsContent value="finances" className="mt-6">
            <FinancesTab stats={stats} />
          </TabsContent>

          <TabsContent value="stories" className="mt-6">
            <StoriesTab
              stories={stories}
              onCreateStory={() => setIsCreateStoryOpen(true)}
              onDeleteStory={handleDeleteStory}
            />
          </TabsContent>

          <TabsContent value="settings" className="mt-6">
            <SettingsTab onEditProfile={handleEditProfile} />
          </TabsContent>
        </Tabs>
      </div>

      {/* Create Story Modal */}
      <CreateStoryModal
        isOpen={isCreateStoryOpen}
        onClose={() => setIsCreateStoryOpen(false)}
        onSubmit={handleCreateStory}
      />

      {/* Revision Modal */}
      <RevisionModal
        isOpen={showRevisionModal}
        onClose={() => setShowRevisionModal(false)}
      />

      {/* Subscription Modal */}
      <SubscriptionModal
        isOpen={showSubscriptionModal}
        onClose={() => setShowSubscriptionModal(false)}
        onSubscribe={handleSubscribe}
      />
    </div>
  );
}