import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "@/hooks/use-toast";
import Icon from "@/components/ui/icon";
import { useAuth } from "@/context/AuthContext";
import {
  createPayment,
  getTariffPlans,
  activateSubscription,
  isYookassaActive,
} from "@/utils/yookassaApi";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import PricingHeader from "@/components/seller-pricing/PricingHeader";
import PaymentMethodSelector from "@/components/seller-pricing/PaymentMethodSelector";
import TariffPlanCard from "@/components/seller-pricing/TariffPlanCard";
import SecurityInfo from "@/components/seller-pricing/SecurityInfo";

interface TariffPlan {
  id: string;
  name: string;
  price: number;
  duration: string;
  features: string[];
  popular?: boolean;
  savings?: string;
}

const tariffPlans = getTariffPlans();

export default function SellerPricing() {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [selectedTariff, setSelectedTariff] = useState<string | null>(null);
  const [walletBalance, setWalletBalance] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState<"wallet" | "yukassa">(
    "yukassa",
  );
  const yookassaActive = isYookassaActive();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
  const isFromApproval = location.state?.fromApproval;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
  useEffect(() => {
    if (user) {
      const sellerData = JSON.parse(
        localStorage.getItem("seller-token") || "{}",
      );
      setWalletBalance(parseFloat(sellerData.balance || "0"));
    }
  }, [user]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü
  if (user?.userType !== "seller") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <Card className="text-center border-0 shadow-xl">
            <CardHeader>
              <CardTitle className="text-2xl text-red-600 flex items-center justify-center gap-2">
                <Icon name="ShieldX" size={24} />
                –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-600 mb-6">
                –î–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º.
              </p>
              <Button onClick={() => navigate("/")} variant="outline">
                <Icon name="ArrowLeft" size={16} className="mr-2" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  const handlePayment = async (tariffId: string) => {
    setLoading(true);
    setSelectedTariff(tariffId);

    try {
      const tariff = tariffPlans.find((t) => t.id === tariffId);
      if (!tariff) {
        throw new Error("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      if (paymentMethod === "wallet") {
        // –û–ø–ª–∞—Ç–∞ —Å –∫–æ—à–µ–ª—å–∫–∞
        if (walletBalance < tariff.price) {
          toast({
            title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
            description: `–ù–∞ –∫–æ—à–µ–ª—å–∫–µ ${walletBalance.toFixed(2)} ‚ÇΩ, –∞ –Ω—É–∂–Ω–æ ${tariff.price} ‚ÇΩ`,
            variant: "destructive",
          });
          setLoading(false);
          return;
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        const newBalance = walletBalance - tariff.price;
        const sellerData = JSON.parse(
          localStorage.getItem("seller-token") || "{}",
        );
        sellerData.balance = newBalance.toString();
        localStorage.setItem("seller-token", JSON.stringify(sellerData));
        setWalletBalance(newBalance);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è
        const transaction = {
          id: Date.now().toString(),
          sellerId: user.id,
          type: "tariff",
          amount: tariff.price,
          description: `–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ "${tariff.name}"`,
          createdAt: new Date().toISOString(),
          status: "completed",
        };

        const allTransactions = JSON.parse(
          localStorage.getItem("seller-wallet-transactions") || "[]",
        );
        allTransactions.push(transaction);
        localStorage.setItem(
          "seller-wallet-transactions",
          JSON.stringify(allTransactions),
        );

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        activateSubscription(user.id, tariff.id);

        toast({
          title: "–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üéâ",
          description: `–¢–∞—Ä–∏—Ñ "${tariff.name}" —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —Å –∫–æ—à–µ–ª—å–∫–∞`,
        });

        navigate("/seller/dashboard");
      } else {
        // –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É
        if (!yookassaActive) {
          toast({
            title: "–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            description: "–Æ–ö–∞—Å—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            variant: "destructive",
          });
          return;
        }

        const paymentData = await createPayment({
          amount: tariff.price,
          description: `–ü–æ–¥–ø–∏—Å–∫–∞ ${tariff.name} –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞`,
          tariffId: tariff.id,
          sellerId: user.id,
          returnUrl:
            window.location.origin +
            "/seller/payment-success?tariff_id=" +
            tariff.id,
        });

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –Æ–ö–∞—Å—Å—ã
        window.location.href = paymentData.confirmationUrl;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
        description:
          error instanceof Error
            ? error.message
            : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
      setSelectedTariff(null);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å—ã */}
        <PricingHeader 
          isFromApproval={isFromApproval} 
          yookassaActive={yookassaActive} 
        />

        {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã */}
        <PaymentMethodSelector
          paymentMethod={paymentMethod}
          setPaymentMethod={setPaymentMethod}
          walletBalance={walletBalance}
        />

        {/* –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã */}
        <div className="grid lg:grid-cols-3 gap-8 max-w-7xl mx-auto mb-16">
          {tariffPlans.map((tariff) => (
            <TariffPlanCard
              key={tariff.id}
              tariff={tariff}
              loading={loading}
              selectedTariff={selectedTariff}
              paymentMethod={paymentMethod}
              yookassaActive={yookassaActive}
              walletBalance={walletBalance}
              onPayment={handlePayment}
            />
          ))}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        <SecurityInfo />
      </div>
    </div>
  );
}